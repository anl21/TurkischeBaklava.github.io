<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://alpergunes.me</id><title>Web-Chunks</title><subtitle>Programming notes, personal thoughts on random stuff </subtitle> <updated>2020-12-28T01:23:17+03:00</updated> <author> <name>Alper Gunes</name> <uri>https://alpergunes.me</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alpergunes.me" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2020 Alper Gunes </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Map, Filter And Fold</title><link href="https://alpergunes.me/posts/Maps,-Filters-and-Fold/" rel="alternate" type="text/html" title="Map, Filter And Fold" /><published>2020-12-28T01:10:29+03:00</published> <updated>2020-12-28T01:22:55+03:00</updated> <id>https://alpergunes.me/posts/Maps,-Filters-and-Fold/</id> <content src="https://alpergunes.me/posts/Maps,-Filters-and-Fold/" /> <author> <name>Alper Gunes</name> </author> <category term="Programming Languages" /> <category term="Section 3" /> <summary> Map (* Type of map: ('a -&amp;gt; 'b) * 'a list -&amp;gt; 'b list *) fun map (f,xs) = case xs of [] =&amp;gt; [] |x::xs' =&amp;gt; (f x)::map(f,xs') The map function takes a list and a function f and produces a new list by applying f to each element of the list. val incremented = map ((fn x =&amp;gt; x + 1),[1,2,3,4]) = [2,3,4,5] We could have easily written a recursive function over lists of integers th... </summary> </entry> <entry><title>Tail Call Optimization</title><link href="https://alpergunes.me/posts/Tail-Call-Optimization/" rel="alternate" type="text/html" title="Tail Call Optimization" /><published>2020-12-26T01:19:29+03:00</published> <updated>2020-12-26T01:19:29+03:00</updated> <id>https://alpergunes.me/posts/Tail-Call-Optimization/</id> <content src="https://alpergunes.me/posts/Tail-Call-Optimization/" /> <author> <name>Alper Gunes</name> </author> <category term="Programming Languages" /> <category term="Section 2" /> <summary> One of the characteristic features of functional programming is recursion concept. Recursions are not suppose to be harder than using loops. Actually often much easier than loop: When processing a tree Avoids mutation, even for local variables Nevertheless sometimes recurions might be less efficient rather than loops. Then how to reason about efficiency of recursion ? Call-stacks ... </summary> </entry> <entry><title>Data Types And Case Expression</title><link href="https://alpergunes.me/posts/Sec-2-Datatypes/" rel="alternate" type="text/html" title="Data Types And Case Expression" /><published>2020-12-26T00:35:29+03:00</published> <updated>2020-12-26T00:35:29+03:00</updated> <id>https://alpergunes.me/posts/Sec-2-Datatypes/</id> <content src="https://alpergunes.me/posts/Sec-2-Datatypes/" /> <author> <name>Alper Gunes</name> </author> <category term="Programming Languages" /> <category term="Section 2" /> <summary> A programming language should categorize its variables into some types at some point during the life cycle of a program. We can categorize the types into two as base types and compound types. Programming languages have base types, like int, bool ,char and compound types, which are types contain other types in their definition, like list, tuple, options etc. To create a compound type, there ar... </summary> </entry> <entry><title>The Pieces of Programming Languages</title><link href="https://alpergunes.me/posts/The-Pieces-of-Programming-Languages/" rel="alternate" type="text/html" title="The Pieces of Programming Languages" /><published>2020-12-25T20:20:29+03:00</published> <updated>2020-12-26T01:22:51+03:00</updated> <id>https://alpergunes.me/posts/The-Pieces-of-Programming-Languages/</id> <content src="https://alpergunes.me/posts/The-Pieces-of-Programming-Languages/" /> <author> <name>Alper Gunes</name> </author> <category term="Programming Languages" /> <category term="Section 1" /> <summary> Essential “pieces” necessary for defining and learning any programming language: Syntax: How do you write the various parts of the language? Semantics: What do the various language features mean? For example, how are expressions evaluated? Idioms: What are the common approaches to using the language features to express computations? Libraries: What has already been written for you? Ho... </summary> </entry> <entry><title>Bindings, Syntax, Type-Checking and Evaulation Rules in SML</title><link href="https://alpergunes.me/posts/Bidings-and-Basics-in-ML/" rel="alternate" type="text/html" title="Bindings, Syntax, Type-Checking and Evaulation Rules in SML" /><published>2020-12-25T01:29:29+03:00</published> <updated>2020-12-25T01:29:29+03:00</updated> <id>https://alpergunes.me/posts/Bidings-and-Basics-in-ML/</id> <content src="https://alpergunes.me/posts/Bidings-and-Basics-in-ML/" /> <author> <name>Alper Gunes</name> </author> <category term="Programming Languages" /> <category term="Section 1" /> <summary> Expressions And Variable Bindings in ML An ML program is a sequence of bindings. Each bindings gets type-checked and then (assuming it type-checks) evaluated. Let’s consider variable binding now: val x = e Here, val is a keyword, x can be any variable, and e can be any expression. This could be a simple ML program. A value is an expression that “has no more computation to do”. In programmi... </summary> </entry> </feed>
